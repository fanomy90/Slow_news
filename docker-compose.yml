version: "3.9"
# глобальные настройки окружения
x-environment-defaults: &environment-defaults
  DEBUG: "True"
  DB_NAME: "Slow_news"
  DB_USER: "puppeteer"
  DB_PASSWORD: "puppeteer"
  DB_HOST: "postgres"
  DB_PORT: 5432
  CELERY_BROKER_URL: "redis://redis:6379/0"
  CELERY_RESULT_BACKEND: "redis://redis:6379/0"
  SECRET_KEY: "secret"

services:
  redis:
    image: redis
    ports:
      - "6379:6379"
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
  # postgres:
  #   image: postgres:latest
  #   container_name: postgres
  #   environment:
  #     POSTGRES_USER: puppeteer
  #     POSTGRES_PASSWORD: puppeteer
  #     POSTGRES_DB: Slow_news
  #   ports:
  #     - "5432:5432"

  puppeteer:
    restart: always
    build:
      context: ./
      dockerfile: ./Dockerfile
    ports:
      - "9000:9000"
    # depends_on:
    #   - postgres
    environment:
      <<: *environment-defaults
    volumes:
      - /home/projects/SAVE:/yt/news/SAVE
      # - /home/projects/Slow_news/puppeteer:/yt/puppeteer
      # - /home/projects/Slow_news/puppeteer/db.sqlite3:/app/puppeteer/db.sqlite3
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      # каталоги статики для nginx
      # - static_volume:/yt/static
      # - media_volume:/yt/media
      # - static_volume:/yt/staticfiles
      - static_volume:/yt/static
    env_file:
        - .env

    command:
      #выполняем миграции и запускаем веб сервер
      # bash -c "./manage.py collectstatic --noinput && ./manage.py makemigrations && ./manage.py migrate && gunicorn -b 0.0.0.0:9000 puppeteer.wsgi:application"
      # bash -c "./manage.py makemigrations && ./manage.py migrate && ./manage.py collectstatic --noinput --ignore admin && gunicorn --timeout 120 -b 0.0.0.0:9000 puppeteer.wsgi:application --log-level debug --access-logfile /yt/access.log --error-logfile /yt/error.log"

  # nginx:
  #     build:
  #       dockerfile: ./Dockerfile
  #       context: ./docker/nginx/
  #     container_name: yt_nginx
  #     image: yt_nginx
  #     volumes:
  #       - static_volume:/yt/static
  #       - media_volume:/yt/media
  #       - static_volume:/yt/staticfiles
  #     depends_on:
  #       - cell
  #     ports:
  #       - "${NGINX_EXTERNAL_PORT}:80"
        # - "${NGINX_EXTERNAL_HTTPS_PORT}:443"
  nginx:
    # build:
      # dockerfile: ./Dockerfile
      # context: ./docker/nginx/
    container_name: nginx
    image: nginx:latest
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/certificates:/etc/letsencrypt
      - ./docker/nginx/challenges:/var/www/html
      - static_volume:/yt/static
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - puppeteer
      # - certbot
    # command: ["/bin/bash", "./docker/nginx/wait-cert.sh"]
    command: ["/bin/bash", "-c", "nginx -g 'daemon off;'"]

  certbot:
    image: certbot/certbot
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/certificates:/etc/letsencrypt
      - ./docker/nginx/challenges:/var/www/html
      - /var/run/docker.sock:/var/run/docker.sock # для перезапуска nginx после обновления сертификатов
    entrypoint: [
      "certbot", "certonly", "--webroot", "-w", "/var/www/html", "-d", "slow-news.sytes.net",
      "--email", "fanomy90@gmail.com", "--agree-tos", "--no-eff-email", "--keep-until-expiring"
    ]
    depends_on:
      - nginx

  celery:
    restart: always
    build:
      context: ./
    volumes:
      - /home/projects/SAVE:/yt/puppeteer/SAVE
      - /home/projects/Slow_news/puppeteer/db.sqlite3:/yt/puppeteer/db.sqlite3  # Монтируем SQLite файл
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    # command: ['celery', '--workdir=./puppeteer', '-A', 'puppeteer', 'worker']
    # command: ['celery', './yt/puppeteer/puppeteer', '-A', 'puppeteer', 'worker']
    # command: ['celery', '--workdir=/yt/puppeteer', '-A', 'puppeteer', 'worker']
    command: ['celery', '--workdir=.', '-A', 'puppeteer', 'worker']
    depends_on:
      - redis
      - puppeteer
      #   - postgres
    environment:
      <<: *environment-defaults
  # периодические фоновые задачи
  celery-beat:
    restart: always
    build:
      context: ./
    volumes:
      - /home/projects/SAVE:/yt/puppeteer/SAVE
      - /home/projects/Slow_news/puppeteer/db.sqlite3:/yt/puppeteer/db.sqlite3  # Монтируем SQLite файл
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    # command: ['celery', '--workdir=./puppeteer', '-A', 'puppeteer', 'worker']
    # command: ['celery', './yt/puppeteer/puppeteer', '-A', 'puppeteer', 'worker']
    # command: ['celery', '--workdir=/yt/puppeteer', '-A', 'puppeteer', 'worker']
    command: ['celery', '--workdir=.', '-A', 'puppeteer', 'beat']
    depends_on:
      - redis
      - puppeteer
      #   - postgres
    environment:
      <<: *environment-defaults

  # контейнер для мониторинга и управления задачами
  # flower:
  #   image: mher/flower
  #   command: ['flower', '--broker=redis://redis:6379/0', '--port=5555']
  #   restart: always
  #   ports:
  #     - "5555:5555"
  #   depends_on:
  #     - redis
volumes:
    static_volume:
    # media_volume: